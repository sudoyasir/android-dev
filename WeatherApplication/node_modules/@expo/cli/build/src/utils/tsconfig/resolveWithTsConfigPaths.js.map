{"version":3,"sources":["../../../../src/utils/tsconfig/resolveWithTsConfigPaths.ts"],"sourcesContent":["import { Resolution } from 'metro-resolver';\nimport path from 'path';\n\nimport { matchTsConfigPathAlias } from './matchTsConfigPathAlias';\n\ntype Paths = { [match: string]: string[] };\n\nconst debug = require('debug')('expo:metro:tsconfig-paths') as typeof console.log;\n\nconst isAbsolute = process.platform === 'win32' ? path.win32.isAbsolute : path.posix.isAbsolute;\n\nexport function resolveWithTsConfigPaths(\n  config: { paths: Paths; baseUrl: string },\n  request: {\n    /** Import request */\n    moduleName: string;\n    /** Originating file path */\n    originModulePath: string;\n  },\n  resolve: (moduleName: string) => Resolution | null\n): Resolution | null {\n  const aliases = Object.keys(config.paths);\n\n  if (\n    // If no aliases are added bail out\n    !aliases.length ||\n    // Library authors cannot utilize this feature in userspace.\n    /node_modules/.test(request.originModulePath) ||\n    // Absolute paths are not supported\n    isAbsolute(request.moduleName) ||\n    // Relative paths are not supported\n    /^\\.\\.?($|[\\\\/])/.test(request.moduleName)\n  ) {\n    return null;\n  }\n\n  const matched = matchTsConfigPathAlias(aliases, request.moduleName);\n  if (!matched) {\n    return null;\n  }\n\n  for (const alias of config.paths[matched.text]) {\n    const nextModuleName = matched.star ? alias.replace('*', matched.star) : alias;\n\n    if (/\\.d\\.ts$/.test(nextModuleName)) continue;\n\n    const possibleResult = path.join(config.baseUrl, nextModuleName);\n\n    const result = resolve(possibleResult);\n    if (result) {\n      debug(`${request.moduleName} -> ${possibleResult}`);\n      return result;\n    }\n  }\n  return null;\n}\n"],"names":["resolveWithTsConfigPaths","debug","require","isAbsolute","process","platform","path","win32","posix","config","request","resolve","aliases","Object","keys","paths","length","test","originModulePath","moduleName","matched","matchTsConfigPathAlias","alias","text","nextModuleName","star","replace","possibleResult","join","baseUrl","result"],"mappings":"AAAA;;;;QAWgBA,wBAAwB,GAAxBA,wBAAwB;AAVvB,IAAA,KAAM,kCAAN,MAAM,EAAA;AAEgB,IAAA,uBAA0B,WAA1B,0BAA0B,CAAA;;;;;;AAIjE,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC,CAAC,2BAA2B,CAAC,AAAsB,AAAC;AAElF,MAAMC,UAAU,GAAGC,OAAO,CAACC,QAAQ,KAAK,OAAO,GAAGC,KAAI,QAAA,CAACC,KAAK,CAACJ,UAAU,GAAGG,KAAI,QAAA,CAACE,KAAK,CAACL,UAAU,AAAC;AAEzF,SAASH,wBAAwB,CACtCS,MAAyC,EACzCC,OAKC,EACDC,OAAkD,EAC/B;IACnB,MAAMC,OAAO,GAAGC,MAAM,CAACC,IAAI,CAACL,MAAM,CAACM,KAAK,CAAC,AAAC;IAE1C,IACE,mCAAmC;IACnC,CAACH,OAAO,CAACI,MAAM,IACf,4DAA4D;IAC5D,eAAeC,IAAI,CAACP,OAAO,CAACQ,gBAAgB,CAAC,IAC7C,mCAAmC;IACnCf,UAAU,CAACO,OAAO,CAACS,UAAU,CAAC,IAC9B,mCAAmC;IACnC,kBAAkBF,IAAI,CAACP,OAAO,CAACS,UAAU,CAAC,EAC1C;QACA,OAAO,IAAI,CAAC;KACb;IAED,MAAMC,OAAO,GAAGC,CAAAA,GAAAA,uBAAsB,AAA6B,CAAA,uBAA7B,CAACT,OAAO,EAAEF,OAAO,CAACS,UAAU,CAAC,AAAC;IACpE,IAAI,CAACC,OAAO,EAAE;QACZ,OAAO,IAAI,CAAC;KACb;IAED,KAAK,MAAME,KAAK,IAAIb,MAAM,CAACM,KAAK,CAACK,OAAO,CAACG,IAAI,CAAC,CAAE;QAC9C,MAAMC,cAAc,GAAGJ,OAAO,CAACK,IAAI,GAAGH,KAAK,CAACI,OAAO,CAAC,GAAG,EAAEN,OAAO,CAACK,IAAI,CAAC,GAAGH,KAAK,AAAC;QAE/E,IAAI,WAAWL,IAAI,CAACO,cAAc,CAAC,EAAE,SAAS;QAE9C,MAAMG,cAAc,GAAGrB,KAAI,QAAA,CAACsB,IAAI,CAACnB,MAAM,CAACoB,OAAO,EAAEL,cAAc,CAAC,AAAC;QAEjE,MAAMM,MAAM,GAAGnB,OAAO,CAACgB,cAAc,CAAC,AAAC;QACvC,IAAIG,MAAM,EAAE;YACV7B,KAAK,CAAC,CAAC,EAAES,OAAO,CAACS,UAAU,CAAC,IAAI,EAAEQ,cAAc,CAAC,CAAC,CAAC,CAAC;YACpD,OAAOG,MAAM,CAAC;SACf;KACF;IACD,OAAO,IAAI,CAAC;CACb"}