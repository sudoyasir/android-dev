{"version":3,"sources":["../../../../src/run/ios/runIosAsync.ts"],"sourcesContent":["import chalk from 'chalk';\n\nimport * as Log from '../../log';\nimport { maybePromptToSyncPodsAsync } from '../../utils/cocoapods';\nimport { setNodeEnv } from '../../utils/nodeEnv';\nimport { ensurePortAvailabilityAsync } from '../../utils/port';\nimport { profile } from '../../utils/profile';\nimport { getSchemesForIosAsync } from '../../utils/scheme';\nimport { ensureNativeProjectAsync } from '../ensureNativeProject';\nimport { logProjectLogsLocation } from '../hints';\nimport { startBundlerAsync } from '../startBundler';\nimport * as XcodeBuild from './XcodeBuild';\nimport { Options } from './XcodeBuild.types';\nimport { launchAppAsync } from './launchApp';\nimport { resolveOptionsAsync } from './options/resolveOptions';\n\nexport async function runIosAsync(projectRoot: string, options: Options) {\n  setNodeEnv(options.configuration === 'Release' ? 'production' : 'development');\n  require('@expo/env').load(projectRoot);\n\n  assertPlatform();\n\n  const install = !!options.install;\n\n  if ((await ensureNativeProjectAsync(projectRoot, { platform: 'ios', install })) && install) {\n    await maybePromptToSyncPodsAsync(projectRoot);\n  }\n\n  // Resolve the CLI arguments into useable options.\n  const props = await resolveOptionsAsync(projectRoot, options);\n\n  // Spawn the `xcodebuild` process to create the app binary.\n  const buildOutput = await XcodeBuild.buildAsync(props);\n\n  // Find the path to the built app binary, this will be used to install the binary\n  // on a device.\n  const binaryPath = await profile(XcodeBuild.getAppBinaryPath)(buildOutput);\n\n  // Ensure the port hasn't become busy during the build.\n  if (props.shouldStartBundler && !(await ensurePortAvailabilityAsync(projectRoot, props))) {\n    props.shouldStartBundler = false;\n  }\n\n  // Start the dev server which creates all of the required info for\n  // launching the app on a simulator.\n  const manager = await startBundlerAsync(projectRoot, {\n    port: props.port,\n    headless: !props.shouldStartBundler,\n    // If a scheme is specified then use that instead of the package name.\n    scheme: (await getSchemesForIosAsync(projectRoot))?.[0],\n  });\n\n  // Install and launch the app binary on a device.\n  await launchAppAsync(binaryPath, manager, {\n    isSimulator: props.isSimulator,\n    device: props.device,\n    shouldStartBundler: props.shouldStartBundler,\n  });\n\n  // Log the location of the JS logs for the device.\n  if (props.shouldStartBundler) {\n    logProjectLogsLocation();\n  }\n}\n\nfunction assertPlatform() {\n  if (process.platform !== 'darwin') {\n    Log.exit(\n      chalk`iOS apps can only be built on macOS devices. Use {cyan eas build -p ios} to build in the cloud.`\n    );\n  }\n}\n"],"names":["runIosAsync","Log","XcodeBuild","projectRoot","options","setNodeEnv","configuration","require","load","assertPlatform","install","ensureNativeProjectAsync","platform","maybePromptToSyncPodsAsync","props","resolveOptionsAsync","buildOutput","buildAsync","binaryPath","profile","getAppBinaryPath","shouldStartBundler","ensurePortAvailabilityAsync","manager","startBundlerAsync","port","headless","scheme","getSchemesForIosAsync","launchAppAsync","isSimulator","device","logProjectLogsLocation","process","exit","chalk"],"mappings":"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"}