{"version":3,"sources":["../../../src/config/configAsync.ts"],"sourcesContent":["import { ExpoConfig, getConfig, ProjectConfig } from '@expo/config';\nimport assert from 'assert';\nimport util from 'util';\n\nimport * as Log from '../log';\nimport { CommandError } from '../utils/errors';\nimport { setNodeEnv } from '../utils/nodeEnv';\nimport { profile } from '../utils/profile';\n\ntype Options = {\n  type?: string;\n  full?: boolean;\n  json?: boolean;\n};\n\nexport function logConfig(config: ExpoConfig | ProjectConfig) {\n  const isObjStr = (str: string): boolean => /^\\w+: {/g.test(str);\n  Log.log(\n    util.inspect(config, {\n      colors: true,\n      compact: false,\n      // Sort objects to the end so that smaller values aren't hidden between large objects.\n      sorted(a: string, b: string) {\n        if (isObjStr(a)) return 1;\n        if (isObjStr(b)) return -1;\n        return 0;\n      },\n      showHidden: false,\n      depth: null,\n    })\n  );\n}\n\nexport async function configAsync(projectRoot: string, options: Options) {\n  setNodeEnv('development');\n  require('@expo/env').load(projectRoot);\n\n  if (options.type) {\n    assert.match(options.type, /^(public|prebuild|introspect)$/);\n  }\n\n  let config: ProjectConfig;\n\n  if (options.type === 'prebuild') {\n    const { getPrebuildConfigAsync } = await import('@expo/prebuild-config');\n\n    config = await profile(getPrebuildConfigAsync)(projectRoot, {\n      platforms: ['ios', 'android'],\n    });\n  } else if (options.type === 'introspect') {\n    const { getPrebuildConfigAsync } = await import('@expo/prebuild-config');\n    const { compileModsAsync } = await import('@expo/config-plugins/build/plugins/mod-compiler');\n\n    config = await profile(getPrebuildConfigAsync)(projectRoot, {\n      platforms: ['ios', 'android'],\n    });\n\n    await compileModsAsync(config.exp, {\n      projectRoot,\n      introspect: true,\n      platforms: ['ios', 'android'],\n      assertMissingModProviders: false,\n    });\n    // @ts-ignore\n    delete config.modRequest;\n    // @ts-ignore\n    delete config.modResults;\n  } else if (options.type === 'public') {\n    config = profile(getConfig)(projectRoot, {\n      skipSDKVersionRequirement: true,\n      isPublicConfig: true,\n    });\n  } else if (options.type) {\n    throw new CommandError(\n      `Invalid option: --type ${options.type}. Valid options are: public, prebuild`\n    );\n  } else {\n    config = profile(getConfig)(projectRoot, {\n      skipSDKVersionRequirement: true,\n    });\n  }\n\n  const configOutput = options.full ? config : config.exp;\n\n  if (!options.json) {\n    Log.log();\n    logConfig(configOutput);\n    Log.log();\n  } else {\n    Log.log(JSON.stringify(configOutput));\n  }\n}\n"],"names":["logConfig","configAsync","Log","config","isObjStr","str","test","log","util","inspect","colors","compact","sorted","a","b","showHidden","depth","projectRoot","options","setNodeEnv","require","load","type","assert","match","getPrebuildConfigAsync","profile","platforms","compileModsAsync","exp","introspect","assertMissingModProviders","modRequest","modResults","getConfig","skipSDKVersionRequirement","isPublicConfig","CommandError","configOutput","full","json","JSON","stringify"],"mappings":"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"}