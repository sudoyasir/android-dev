{"version":3,"sources":["../../../../../src/start/server/middleware/ClassicManifestMiddleware.ts"],"sourcesContent":["import { ExpoAppManifest, ExpoConfig } from '@expo/config';\nimport chalk from 'chalk';\nimport os from 'os';\n\nimport { disableNetwork } from '../../../api/settings';\nimport { signClassicExpoGoManifestAsync } from '../../../api/signManifest';\nimport UserSettings from '../../../api/user/UserSettings';\nimport { ANONYMOUS_USERNAME, getUserAsync } from '../../../api/user/user';\nimport * as Log from '../../../log';\nimport { logEventAsync } from '../../../utils/analytics/rudderstackClient';\nimport { env } from '../../../utils/env';\nimport { memoize } from '../../../utils/fn';\nimport { learnMore } from '../../../utils/link';\nimport { stripPort } from '../../../utils/url';\nimport {\n  DEVELOPER_TOOL,\n  HostInfo,\n  ManifestMiddleware,\n  ManifestRequestInfo,\n} from './ManifestMiddleware';\nimport { assertRuntimePlatform, parsePlatformHeader } from './resolvePlatform';\nimport { ServerHeaders, ServerRequest } from './server.types';\n\ntype SignManifestProps = {\n  manifest: ExpoAppManifest;\n  hostId: string;\n  acceptSignature: boolean;\n};\n\ninterface ClassicManifestRequestInfo extends ManifestRequestInfo {\n  /** Should return the signed manifest. */\n  acceptSignature: boolean;\n}\n\nconst debug = require('debug')(\n  'expo:start:server:middleware:ClassicManifestMiddleware'\n) as typeof console.log;\n\nexport class ClassicManifestMiddleware extends ManifestMiddleware<ClassicManifestRequestInfo> {\n  public getParsedHeaders(req: ServerRequest): ClassicManifestRequestInfo {\n    const platform = parsePlatformHeader(req) || 'ios';\n    assertRuntimePlatform(platform);\n    return {\n      platform,\n      acceptSignature: this.getLegacyAcceptSignatureHeader(req),\n      hostname: stripPort(req.headers['host']),\n    };\n  }\n\n  /**\n   * This header is specified as a string \"true\" or \"false\", in one of two headers:\n   * - exponent-accept-signature\n   * - expo-accept-signature\n   */\n  private getLegacyAcceptSignatureHeader(req: ServerRequest): boolean {\n    return (\n      req.headers['exponent-accept-signature'] === 'true' ||\n      req.headers['expo-accept-signature'] === 'true'\n    );\n  }\n\n  public async _getManifestResponseAsync({\n    acceptSignature,\n    ...requestOptions\n  }: ClassicManifestRequestInfo): Promise<{\n    body: string;\n    version: string;\n    headers: ServerHeaders;\n  }> {\n    const { exp, hostUri, expoGoConfig, bundleUrl } = await this._resolveProjectSettingsAsync(\n      requestOptions\n    );\n\n    const manifest: ExpoAppManifest = {\n      ...(exp as ExpoAppManifest),\n      ...expoGoConfig,\n      hostUri,\n      bundleUrl,\n    };\n\n    // Gather packager and host info\n    const hostInfo = await createHostInfoAsync();\n\n    const headers = new Map<string, any>();\n    headers.set('Exponent-Server', JSON.stringify(hostInfo));\n\n    // Create the final string\n    const body = await this._fetchComputedManifestStringAsync({\n      manifest,\n      hostId: hostInfo.host,\n      acceptSignature,\n    });\n\n    return {\n      body,\n      version: manifest.sdkVersion,\n      headers,\n    };\n  }\n\n  protected trackManifest(version?: string) {\n    // Log analytics\n    logEventAsync('Serve Manifest', {\n      sdkVersion: version ?? null,\n    });\n  }\n\n  /** Exposed for testing. */\n  async _getManifestStringAsync({\n    manifest,\n    hostId,\n    acceptSignature,\n  }: SignManifestProps): Promise<string> {\n    const currentSession = await getUserAsync();\n    if (!currentSession || env.EXPO_OFFLINE) {\n      manifest.id = `@${ANONYMOUS_USERNAME}/${manifest.slug}-${hostId}`;\n    }\n    if (!acceptSignature) {\n      return JSON.stringify(manifest);\n    } else if (!currentSession || env.EXPO_OFFLINE) {\n      return getUnsignedManifestString(manifest);\n    } else {\n      return this.getSignedManifestStringAsync(manifest);\n    }\n  }\n\n  private getSignedManifestStringAsync = memoize(signClassicExpoGoManifestAsync);\n\n  /** Exposed for testing. */\n  async _fetchComputedManifestStringAsync(props: SignManifestProps): Promise<string> {\n    try {\n      return await this._getManifestStringAsync(props);\n    } catch (error: any) {\n      debug(`Error getting manifest:`, error);\n      if (error.code === 'UNAUTHORIZED' && props.manifest.owner) {\n        // Don't have permissions for signing, warn and enable offline mode.\n        this.addSigningDisabledWarning(\n          `This project belongs to ${chalk.bold(\n            `@${props.manifest.owner}`\n          )} and you have not been granted the appropriate permissions.\\n` +\n            `Please request access from an admin of @${props.manifest.owner} or change the \"owner\" field to an account you belong to.\\n` +\n            learnMore('https://docs.expo.dev/versions/latest/config/app/#owner')\n        );\n\n        disableNetwork();\n        return await this._getManifestStringAsync(props);\n      } else if (error.code === 'ENOTFOUND' || error.code === 'OFFLINE') {\n        // Got a DNS error, i.e. can't access exp.host, warn and enable offline mode.\n        this.addSigningDisabledWarning(\n          `Could not reach Expo servers, please check if you can access ${\n            error.hostname || 'exp.host'\n          }.`\n        );\n\n        disableNetwork();\n        return await this._getManifestStringAsync(props);\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  private addSigningDisabledWarning = memoize((reason: string) => {\n    Log.warn(`${reason}\\nFalling back to offline mode.`);\n    // For the memo\n    return reason;\n  });\n}\n\n// Passed to Expo Go and registered as telemetry.\n// TODO: it's unclear why we don't just send it from the CLI.\nasync function createHostInfoAsync(): Promise<HostInfo> {\n  return {\n    host: await UserSettings.getAnonymousIdentifierAsync(),\n    server: 'expo',\n    // Defined in the build step\n    serverVersion: process.env.__EXPO_VERSION!,\n    serverDriver: DEVELOPER_TOOL,\n    serverOS: os.platform(),\n    serverOSVersion: os.release(),\n  };\n}\n\nfunction getUnsignedManifestString(manifest: ExpoConfig) {\n  const unsignedManifest = {\n    manifestString: JSON.stringify(manifest),\n    signature: 'UNSIGNED',\n  };\n  return JSON.stringify(unsignedManifest);\n}\n"],"names":["Log","debug","require","ClassicManifestMiddleware","ManifestMiddleware","getParsedHeaders","req","platform","parsePlatformHeader","assertRuntimePlatform","acceptSignature","getLegacyAcceptSignatureHeader","hostname","stripPort","headers","_getManifestResponseAsync","requestOptions","exp","hostUri","expoGoConfig","bundleUrl","_resolveProjectSettingsAsync","manifest","hostInfo","createHostInfoAsync","Map","set","JSON","stringify","body","_fetchComputedManifestStringAsync","hostId","host","version","sdkVersion","trackManifest","logEventAsync","_getManifestStringAsync","currentSession","getUserAsync","env","EXPO_OFFLINE","id","ANONYMOUS_USERNAME","slug","getUnsignedManifestString","getSignedManifestStringAsync","memoize","signClassicExpoGoManifestAsync","props","error","code","owner","addSigningDisabledWarning","chalk","bold","learnMore","disableNetwork","reason","warn","UserSettings","getAnonymousIdentifierAsync","server","serverVersion","process","__EXPO_VERSION","serverDriver","DEVELOPER_TOOL","serverOS","os","serverOSVersion","release","unsignedManifest","manifestString","signature"],"mappings":"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"}