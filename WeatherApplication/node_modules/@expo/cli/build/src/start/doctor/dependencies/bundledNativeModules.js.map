{"version":3,"sources":["../../../../../src/start/doctor/dependencies/bundledNativeModules.ts"],"sourcesContent":["import JsonFile from '@expo/json-file';\nimport chalk from 'chalk';\nimport resolveFrom from 'resolve-from';\n\nimport { getNativeModuleVersionsAsync } from '../../../api/getNativeModuleVersions';\nimport * as Log from '../../../log';\nimport { env } from '../../../utils/env';\nimport { CommandError } from '../../../utils/errors';\n\nconst debug = require('debug')(\n  'expo:doctor:dependencies:bundledNativeModules'\n) as typeof console.log;\n\nexport type BundledNativeModules = Record<string, string>;\n\n/**\n * Gets the bundledNativeModules.json for a given SDK version:\n * - Tries to fetch the data from the /sdks/:sdkVersion/native-modules API endpoint.\n * - If the data is missing on the server (it can happen for SDKs that are yet fully released)\n *    or there's a downtime, reads the local .json file from the \"expo\" package.\n * - For UNVERSIONED, returns the local .json file contents.\n */\nexport async function getVersionedNativeModulesAsync(\n  projectRoot: string,\n  sdkVersion: string\n): Promise<BundledNativeModules> {\n  if (sdkVersion !== 'UNVERSIONED' && !env.EXPO_OFFLINE) {\n    try {\n      debug('Fetching bundled native modules from the server...');\n      return await getNativeModuleVersionsAsync(sdkVersion);\n    } catch (error: any) {\n      if (error instanceof CommandError && (error.code === 'OFFLINE' || error.code === 'API')) {\n        Log.warn(\n          chalk`Unable to reach well-known versions endpoint. Using local dependency map {bold expo/bundledNativeModules.json} for version validation`\n        );\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  debug('Fetching bundled native modules from the local JSON file...');\n  return await getBundledNativeModulesAsync(projectRoot);\n}\n\n/**\n * Get the legacy static `bundledNativeModules.json` file\n * that's shipped with the version of `expo` that the project has installed.\n */\nasync function getBundledNativeModulesAsync(projectRoot: string): Promise<BundledNativeModules> {\n  // TODO: Revisit now that this code is in the `expo` package.\n  const bundledNativeModulesPath = resolveFrom.silent(\n    projectRoot,\n    'expo/bundledNativeModules.json'\n  );\n  if (!bundledNativeModulesPath) {\n    Log.log();\n    throw new CommandError(\n      chalk`The dependency map {bold expo/bundledNativeModules.json} cannot be found, please ensure you have the package \"{bold expo}\" installed in your project.`\n    );\n  }\n  return await JsonFile.readAsync<BundledNativeModules>(bundledNativeModulesPath);\n}\n"],"names":["getVersionedNativeModulesAsync","Log","debug","require","projectRoot","sdkVersion","env","EXPO_OFFLINE","getNativeModuleVersionsAsync","error","CommandError","code","warn","chalk","getBundledNativeModulesAsync","bundledNativeModulesPath","resolveFrom","silent","log","JsonFile","readAsync"],"mappings":"AAAA;;;;QAsBsBA,8BAA8B,GAA9BA,8BAA8B;AAtB/B,IAAA,SAAiB,kCAAjB,iBAAiB,EAAA;AACpB,IAAA,MAAO,kCAAP,OAAO,EAAA;AACD,IAAA,YAAc,kCAAd,cAAc,EAAA;AAEO,IAAA,wBAAsC,WAAtC,sCAAsC,CAAA;AACvEC,IAAAA,GAAG,mCAAM,cAAc,EAApB;AACK,IAAA,IAAoB,WAApB,oBAAoB,CAAA;AACX,IAAA,OAAuB,WAAvB,uBAAuB,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEpD,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC,CAC5B,+CAA+C,CAChD,AAAsB,AAAC;AAWjB,eAAeH,8BAA8B,CAClDI,WAAmB,EACnBC,UAAkB,EACa;IAC/B,IAAIA,UAAU,KAAK,aAAa,IAAI,CAACC,IAAG,IAAA,CAACC,YAAY,EAAE;QACrD,IAAI;YACFL,KAAK,CAAC,oDAAoD,CAAC,CAAC;YAC5D,OAAO,MAAMM,CAAAA,GAAAA,wBAA4B,AAAY,CAAA,6BAAZ,CAACH,UAAU,CAAC,CAAC;SACvD,CAAC,OAAOI,KAAK,EAAO;YACnB,IAAIA,KAAK,YAAYC,OAAY,aAAA,IAAI,CAACD,KAAK,CAACE,IAAI,KAAK,SAAS,IAAIF,KAAK,CAACE,IAAI,KAAK,KAAK,CAAC,EAAE;gBACvFV,GAAG,CAACW,IAAI,CACNC,MAAK,QAAA,CAAC,qIAAqI,CAAC,CAC7I,CAAC;aACH,MAAM;gBACL,MAAMJ,KAAK,CAAC;aACb;SACF;KACF;IAEDP,KAAK,CAAC,6DAA6D,CAAC,CAAC;IACrE,OAAO,MAAMY,4BAA4B,CAACV,WAAW,CAAC,CAAC;CACxD;AAED;;;GAGG,CACH,eAAeU,4BAA4B,CAACV,WAAmB,EAAiC;IAC9F,6DAA6D;IAC7D,MAAMW,wBAAwB,GAAGC,YAAW,QAAA,CAACC,MAAM,CACjDb,WAAW,EACX,gCAAgC,CACjC,AAAC;IACF,IAAI,CAACW,wBAAwB,EAAE;QAC7Bd,GAAG,CAACiB,GAAG,EAAE,CAAC;QACV,MAAM,IAAIR,OAAY,aAAA,CACpBG,MAAK,QAAA,CAAC,qJAAqJ,CAAC,CAC7J,CAAC;KACH;IACD,OAAO,MAAMM,SAAQ,QAAA,CAACC,SAAS,CAAuBL,wBAAwB,CAAC,CAAC;CACjF"}