{"version":3,"sources":["../../../../../src/start/doctor/dependencies/getVersionedPackages.ts"],"sourcesContent":["import { PackageJSONConfig } from '@expo/config';\nimport npmPackageArg from 'npm-package-arg';\n\nimport { getVersionsAsync, SDKVersion } from '../../../api/getVersions';\nimport { Log } from '../../../log';\nimport { env } from '../../../utils/env';\nimport { CommandError } from '../../../utils/errors';\nimport { getVersionedNativeModulesAsync } from './bundledNativeModules';\n\nconst debug = require('debug')(\n  'expo:doctor:dependencies:getVersionedPackages'\n) as typeof console.log;\n\nexport type DependencyList = Record<string, string>;\n\n/** Adds `react-dom`, `react`, and `react-native` to the list of known package versions (`relatedPackages`) */\nfunction normalizeSdkVersionObject(version?: SDKVersion): Record<string, string> {\n  if (!version) {\n    return {};\n  }\n  const { relatedPackages, facebookReactVersion, facebookReactNativeVersion } = version;\n\n  const reactVersion = facebookReactVersion\n    ? {\n        react: facebookReactVersion,\n        'react-dom': facebookReactVersion,\n      }\n    : undefined;\n\n  return {\n    ...relatedPackages,\n    ...reactVersion,\n    'react-native': facebookReactNativeVersion,\n  };\n}\n\n/** Get the known versions for a given SDK, combines all sources. */\nexport async function getCombinedKnownVersionsAsync({\n  projectRoot,\n  sdkVersion,\n  skipCache,\n}: {\n  projectRoot: string;\n  sdkVersion?: string;\n  skipCache?: boolean;\n}) {\n  const bundledNativeModules = sdkVersion\n    ? await getVersionedNativeModulesAsync(projectRoot, sdkVersion)\n    : {};\n  const versionsForSdk = await getRemoteVersionsForSdkAsync({ sdkVersion, skipCache });\n  return {\n    ...versionsForSdk,\n    ...bundledNativeModules,\n  };\n}\n\n/** @returns a key/value list of known dependencies and their version (including range). */\nexport async function getRemoteVersionsForSdkAsync({\n  sdkVersion,\n  skipCache,\n}: { sdkVersion?: string; skipCache?: boolean } = {}): Promise<DependencyList> {\n  if (env.EXPO_OFFLINE) {\n    Log.warn('Dependency validation is unreliable in offline-mode');\n    return {};\n  }\n\n  try {\n    const { sdkVersions } = await getVersionsAsync({ skipCache });\n\n    // We only want versioned dependencies so skip if they cannot be found.\n    if (!sdkVersion || !(sdkVersion in sdkVersions)) {\n      debug(\n        `Skipping versioned dependencies because the SDK version is not found. (sdkVersion: ${sdkVersion}, available: ${Object.keys(\n          sdkVersions\n        ).join(', ')})`\n      );\n      return {};\n    }\n\n    const version = sdkVersions[sdkVersion as keyof typeof sdkVersions] as unknown as SDKVersion;\n\n    return normalizeSdkVersionObject(version);\n  } catch (error: any) {\n    if (error instanceof CommandError && error.code === 'OFFLINE') {\n      return getRemoteVersionsForSdkAsync({ sdkVersion, skipCache });\n    }\n    throw error;\n  }\n}\n\n/**\n * Versions a list of `packages` against a given `sdkVersion` based on local and remote versioning resources.\n *\n * @param projectRoot\n * @param param1\n * @returns\n */\nexport async function getVersionedPackagesAsync(\n  projectRoot: string,\n  {\n    packages,\n    sdkVersion,\n    pkg,\n  }: {\n    /** List of npm packages to process. */\n    packages: string[];\n    /** Target SDK Version number to version the `packages` for. */\n    sdkVersion: string;\n    pkg: PackageJSONConfig;\n  }\n): Promise<{\n  packages: string[];\n  messages: string[];\n  excludedNativeModules: { name: string; bundledNativeVersion: string }[];\n}> {\n  const versionsForSdk = await getCombinedKnownVersionsAsync({\n    projectRoot,\n    sdkVersion,\n    skipCache: true,\n  });\n\n  let nativeModulesCount = 0;\n  let othersCount = 0;\n  const excludedNativeModules: { name: string; bundledNativeVersion: string }[] = [];\n\n  const versionedPackages = packages.map((arg) => {\n    const { name, type, raw } = npmPackageArg(arg);\n\n    if (['tag', 'version', 'range'].includes(type) && name && versionsForSdk[name]) {\n      // Unimodule packages from npm registry are modified to use the bundled version.\n      // Some packages have the recommended version listed in https://exp.host/--/api/v2/versions.\n      if (pkg?.expo?.install?.exclude?.includes(name)) {\n        othersCount++;\n        excludedNativeModules.push({ name, bundledNativeVersion: versionsForSdk[name] });\n        return raw;\n      }\n      nativeModulesCount++;\n      return `${name}@${versionsForSdk[name]}`;\n    } else {\n      // Other packages are passed through unmodified.\n      othersCount++;\n      return raw;\n    }\n  });\n\n  const messages = getOperationLog({\n    othersCount,\n    nativeModulesCount,\n    sdkVersion,\n  });\n\n  return {\n    packages: versionedPackages,\n    messages,\n    excludedNativeModules,\n  };\n}\n\n/** Craft a set of messages regarding the install operations. */\nexport function getOperationLog({\n  nativeModulesCount,\n  sdkVersion,\n  othersCount,\n}: {\n  nativeModulesCount: number;\n  othersCount: number;\n  sdkVersion: string;\n}): string[] {\n  return [\n    nativeModulesCount > 0 &&\n      `${nativeModulesCount} SDK ${sdkVersion} compatible native ${\n        nativeModulesCount === 1 ? 'module' : 'modules'\n      }`,\n    othersCount > 0 && `${othersCount} other ${othersCount === 1 ? 'package' : 'packages'}`,\n  ].filter(Boolean) as string[];\n}\n"],"names":["getCombinedKnownVersionsAsync","getRemoteVersionsForSdkAsync","getVersionedPackagesAsync","getOperationLog","debug","require","normalizeSdkVersionObject","version","relatedPackages","facebookReactVersion","facebookReactNativeVersion","reactVersion","react","undefined","projectRoot","sdkVersion","skipCache","bundledNativeModules","getVersionedNativeModulesAsync","versionsForSdk","env","EXPO_OFFLINE","Log","warn","sdkVersions","getVersionsAsync","Object","keys","join","error","CommandError","code","packages","pkg","nativeModulesCount","othersCount","excludedNativeModules","versionedPackages","map","arg","name","type","raw","npmPackageArg","includes","expo","install","exclude","push","bundledNativeVersion","messages","filter","Boolean"],"mappings":"AAAA;;;;QAqCsBA,6BAA6B,GAA7BA,6BAA6B;QAoB7BC,4BAA4B,GAA5BA,4BAA4B;QAwC5BC,yBAAyB,GAAzBA,yBAAyB;QA8D/BC,eAAe,GAAfA,eAAe;AA9JL,IAAA,cAAiB,kCAAjB,iBAAiB,EAAA;AAEE,IAAA,YAA0B,WAA1B,0BAA0B,CAAA;AACnD,IAAA,IAAc,WAAd,cAAc,CAAA;AACd,IAAA,IAAoB,WAApB,oBAAoB,CAAA;AACX,IAAA,OAAuB,WAAvB,uBAAuB,CAAA;AACL,IAAA,qBAAwB,WAAxB,wBAAwB,CAAA;;;;;;AAEvE,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC,CAC5B,+CAA+C,CAChD,AAAsB,AAAC;AAIxB,8GAA8G,CAC9G,SAASC,yBAAyB,CAACC,OAAoB,EAA0B;IAC/E,IAAI,CAACA,OAAO,EAAE;QACZ,OAAO,EAAE,CAAC;KACX;IACD,MAAM,EAAEC,eAAe,CAAA,EAAEC,oBAAoB,CAAA,EAAEC,0BAA0B,CAAA,EAAE,GAAGH,OAAO,AAAC;IAEtF,MAAMI,YAAY,GAAGF,oBAAoB,GACrC;QACEG,KAAK,EAAEH,oBAAoB;QAC3B,WAAW,EAAEA,oBAAoB;KAClC,GACDI,SAAS,AAAC;IAEd,OAAO;QACL,GAAGL,eAAe;QAClB,GAAGG,YAAY;QACf,cAAc,EAAED,0BAA0B;KAC3C,CAAC;CACH;AAGM,eAAeV,6BAA6B,CAAC,EAClDc,WAAW,CAAA,EACXC,UAAU,CAAA,EACVC,SAAS,CAAA,EAKV,EAAE;IACD,MAAMC,oBAAoB,GAAGF,UAAU,GACnC,MAAMG,CAAAA,GAAAA,qBAA8B,AAAyB,CAAA,+BAAzB,CAACJ,WAAW,EAAEC,UAAU,CAAC,GAC7D,EAAE,AAAC;IACP,MAAMI,cAAc,GAAG,MAAMlB,4BAA4B,CAAC;QAAEc,UAAU;QAAEC,SAAS;KAAE,CAAC,AAAC;IACrF,OAAO;QACL,GAAGG,cAAc;QACjB,GAAGF,oBAAoB;KACxB,CAAC;CACH;AAGM,eAAehB,4BAA4B,CAAC,EACjDc,UAAU,CAAA,EACVC,SAAS,CAAA,EACoC,GAAG,EAAE,EAA2B;IAC7E,IAAII,IAAG,IAAA,CAACC,YAAY,EAAE;QACpBC,IAAG,IAAA,CAACC,IAAI,CAAC,qDAAqD,CAAC,CAAC;QAChE,OAAO,EAAE,CAAC;KACX;IAED,IAAI;QACF,MAAM,EAAEC,WAAW,CAAA,EAAE,GAAG,MAAMC,CAAAA,GAAAA,YAAgB,AAAe,CAAA,iBAAf,CAAC;YAAET,SAAS;SAAE,CAAC,AAAC;QAE9D,uEAAuE;QACvE,IAAI,CAACD,UAAU,IAAI,CAAC,CAACA,UAAU,IAAIS,WAAW,CAAC,EAAE;YAC/CpB,KAAK,CACH,CAAC,mFAAmF,EAAEW,UAAU,CAAC,aAAa,EAAEW,MAAM,CAACC,IAAI,CACzHH,WAAW,CACZ,CAACI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAChB,CAAC;YACF,OAAO,EAAE,CAAC;SACX;QAED,MAAMrB,OAAO,GAAGiB,WAAW,CAACT,UAAU,CAA6B,AAAyB,AAAC;QAE7F,OAAOT,yBAAyB,CAACC,OAAO,CAAC,CAAC;KAC3C,CAAC,OAAOsB,KAAK,EAAO;QACnB,IAAIA,KAAK,YAAYC,OAAY,aAAA,IAAID,KAAK,CAACE,IAAI,KAAK,SAAS,EAAE;YAC7D,OAAO9B,4BAA4B,CAAC;gBAAEc,UAAU;gBAAEC,SAAS;aAAE,CAAC,CAAC;SAChE;QACD,MAAMa,KAAK,CAAC;KACb;CACF;AASM,eAAe3B,yBAAyB,CAC7CY,WAAmB,EACnB,EACEkB,QAAQ,CAAA,EACRjB,UAAU,CAAA,EACVkB,GAAG,CAAA,EAOJ,EAKA;IACD,MAAMd,cAAc,GAAG,MAAMnB,6BAA6B,CAAC;QACzDc,WAAW;QACXC,UAAU;QACVC,SAAS,EAAE,IAAI;KAChB,CAAC,AAAC;IAEH,IAAIkB,kBAAkB,GAAG,CAAC,AAAC;IAC3B,IAAIC,WAAW,GAAG,CAAC,AAAC;IACpB,MAAMC,qBAAqB,GAAqD,EAAE,AAAC;IAEnF,MAAMC,iBAAiB,GAAGL,QAAQ,CAACM,GAAG,CAAC,CAACC,GAAG,GAAK;QAC9C,MAAM,EAAEC,IAAI,CAAA,EAAEC,IAAI,CAAA,EAAEC,GAAG,CAAA,EAAE,GAAGC,CAAAA,GAAAA,cAAa,AAAK,CAAA,QAAL,CAACJ,GAAG,CAAC,AAAC;QAE/C,IAAI;YAAC,KAAK;YAAE,SAAS;YAAE,OAAO;SAAC,CAACK,QAAQ,CAACH,IAAI,CAAC,IAAID,IAAI,IAAIrB,cAAc,CAACqB,IAAI,CAAC,EAAE;gBAG1EP,GAAS;YAFb,gFAAgF;YAChF,4FAA4F;YAC5F,IAAIA,GAAG,QAAM,GAATA,KAAAA,CAAS,GAATA,CAAAA,GAAS,GAATA,GAAG,CAAEY,IAAI,SAAA,GAATZ,KAAAA,CAAS,GAATA,QAAAA,GAAS,CAAEa,OAAO,SAAT,GAATb,KAAAA,CAAS,GAATA,aAAoBc,OAAO,SAAlB,GAATd,KAAAA,CAAS,GAATA,KAA6BW,QAAQ,CAACJ,IAAI,CAAC,EAAE;gBAC/CL,WAAW,EAAE,CAAC;gBACdC,qBAAqB,CAACY,IAAI,CAAC;oBAAER,IAAI;oBAAES,oBAAoB,EAAE9B,cAAc,CAACqB,IAAI,CAAC;iBAAE,CAAC,CAAC;gBACjF,OAAOE,GAAG,CAAC;aACZ;YACDR,kBAAkB,EAAE,CAAC;YACrB,OAAO,CAAC,EAAEM,IAAI,CAAC,CAAC,EAAErB,cAAc,CAACqB,IAAI,CAAC,CAAC,CAAC,CAAC;SAC1C,MAAM;YACL,gDAAgD;YAChDL,WAAW,EAAE,CAAC;YACd,OAAOO,GAAG,CAAC;SACZ;KACF,CAAC,AAAC;IAEH,MAAMQ,QAAQ,GAAG/C,eAAe,CAAC;QAC/BgC,WAAW;QACXD,kBAAkB;QAClBnB,UAAU;KACX,CAAC,AAAC;IAEH,OAAO;QACLiB,QAAQ,EAAEK,iBAAiB;QAC3Ba,QAAQ;QACRd,qBAAqB;KACtB,CAAC;CACH;AAGM,SAASjC,eAAe,CAAC,EAC9B+B,kBAAkB,CAAA,EAClBnB,UAAU,CAAA,EACVoB,WAAW,CAAA,EAKZ,EAAY;IACX,OAAO;QACLD,kBAAkB,GAAG,CAAC,IACpB,CAAC,EAAEA,kBAAkB,CAAC,KAAK,EAAEnB,UAAU,CAAC,mBAAmB,EACzDmB,kBAAkB,KAAK,CAAC,GAAG,QAAQ,GAAG,SAAS,CAChD,CAAC;QACJC,WAAW,GAAG,CAAC,IAAI,CAAC,EAAEA,WAAW,CAAC,OAAO,EAAEA,WAAW,KAAK,CAAC,GAAG,SAAS,GAAG,UAAU,CAAC,CAAC;KACxF,CAACgB,MAAM,CAACC,OAAO,CAAC,CAAa;CAC/B"}