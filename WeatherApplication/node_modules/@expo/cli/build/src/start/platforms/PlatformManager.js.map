{"version":3,"sources":["../../../../src/start/platforms/PlatformManager.ts"],"sourcesContent":["import { getConfig } from '@expo/config';\nimport assert from 'assert';\nimport chalk from 'chalk';\n\nimport { Log } from '../../log';\nimport { logEventAsync } from '../../utils/analytics/rudderstackClient';\nimport { CommandError, UnimplementedError } from '../../utils/errors';\nimport { learnMore } from '../../utils/link';\nimport { AppIdResolver } from './AppIdResolver';\nimport { DeviceManager } from './DeviceManager';\n\nconst debug = require('debug')('expo:start:platforms:platformManager') as typeof console.log;\n\nexport interface BaseOpenInCustomProps {\n  scheme?: string;\n  applicationId?: string | null;\n}\n\nexport interface BaseResolveDeviceProps<IDevice> {\n  /** Should prompt the user to select a device. */\n  shouldPrompt?: boolean;\n  /** The target device to use. */\n  device?: IDevice;\n}\n\n/** An abstract class for launching a URL on a device. */\nexport class PlatformManager<\n  IDevice,\n  IOpenInCustomProps extends BaseOpenInCustomProps = BaseOpenInCustomProps,\n  IResolveDeviceProps extends BaseResolveDeviceProps<IDevice> = BaseResolveDeviceProps<IDevice>\n> {\n  constructor(\n    protected projectRoot: string,\n    protected props: {\n      platform: 'ios' | 'android';\n      /** Get the base URL for the dev server hosting this platform manager. */\n      getDevServerUrl: () => string | null;\n      /** Expo Go URL. */\n      getExpoGoUrl: () => string;\n      /**\n       * Get redirect URL for native disambiguation.\n       * @returns a URL like `http://localhost:8081/_expo/loading`\n       */\n      getRedirectUrl: () => string | null;\n      /** Dev Client */\n      getCustomRuntimeUrl: (props?: { scheme?: string }) => string | null;\n      /** Resolve a device, this function should automatically handle opening the device and asserting any system validations. */\n      resolveDeviceAsync: (\n        resolver?: Partial<IResolveDeviceProps>\n      ) => Promise<DeviceManager<IDevice>>;\n    }\n  ) {}\n\n  /** Returns the project application identifier or asserts that one is not defined. Exposed for testing. */\n  _getAppIdResolver(): AppIdResolver {\n    throw new UnimplementedError();\n  }\n\n  /**\n   * Get the URL for users intending to launch the project in Expo Go.\n   * The CLI will check if the project has a custom dev client and if the redirect page feature is enabled.\n   * If both are true, the CLI will return the redirect page URL.\n   */\n  protected async getExpoGoOrCustomRuntimeUrlAsync(\n    deviceManager: DeviceManager<IDevice>\n  ): Promise<string> {\n    // Determine if the redirect page feature is enabled first since it's the cheapest to check.\n    const redirectUrl = this.props.getRedirectUrl();\n    if (redirectUrl) {\n      // If the redirect page feature is enabled, check if the project has a resolvable native identifier.\n      let applicationId;\n      try {\n        applicationId = await this._getAppIdResolver().getAppIdAsync();\n      } catch {\n        Log.warn(\n          chalk`\\u203A Launching in Expo Go. If you want to use a ` +\n            `development build, you need to create and install one first, or, if you already ` +\n            chalk`have a build, add {bold ios.bundleIdentifier} and {bold android.package} to ` +\n            `this project's app config.\\n${learnMore('https://docs.expo.dev/development/build/')}`\n        );\n      }\n      if (applicationId) {\n        debug(`Resolving launch URL: (appId: ${applicationId}, redirect URL: ${redirectUrl})`);\n        // NOTE(EvanBacon): This adds considerable amount of time to the command, we should consider removing or memoizing it.\n        // Finally determine if the target device has a custom dev client installed.\n        if (await deviceManager.isAppInstalledAsync(applicationId)) {\n          return redirectUrl;\n        } else {\n          // Log a warning if no development build is available on the device, but the\n          // interstitial page would otherwise be opened.\n          Log.warn(\n            chalk`\\u203A The {bold expo-dev-client} package is installed, but a development build is not ` +\n              chalk`installed on {bold ${deviceManager.name}}.\\nLaunching in Expo Go. If you want to use a ` +\n              `development build, you need to create and install one first.\\n${learnMore(\n                'https://docs.expo.dev/development/build/'\n              )}`\n          );\n        }\n      }\n    }\n\n    return this.props.getExpoGoUrl();\n  }\n\n  protected async openProjectInExpoGoAsync(\n    resolveSettings: Partial<IResolveDeviceProps> = {}\n  ): Promise<{ url: string }> {\n    const deviceManager = await this.props.resolveDeviceAsync(resolveSettings);\n    const url = await this.getExpoGoOrCustomRuntimeUrlAsync(deviceManager);\n\n    deviceManager.logOpeningUrl(url);\n\n    // TODO: Expensive, we should only do this once.\n    const { exp } = getConfig(this.projectRoot);\n    const installedExpo = await deviceManager.ensureExpoGoAsync(exp.sdkVersion);\n\n    deviceManager.activateWindowAsync();\n    await deviceManager.openUrlAsync(url);\n\n    await logEventAsync('Open Url on Device', {\n      platform: this.props.platform,\n      installedExpo,\n    });\n\n    return { url };\n  }\n\n  private async openProjectInCustomRuntimeAsync(\n    resolveSettings: Partial<IResolveDeviceProps> = {},\n    props: Partial<IOpenInCustomProps> = {}\n  ): Promise<{ url: string }> {\n    debug(\n      `open custom (${Object.entries(props)\n        .map(([k, v]) => `${k}: ${v}`)\n        .join(', ')})`\n    );\n\n    let url = this.props.getCustomRuntimeUrl({ scheme: props.scheme });\n    debug(`Opening project in custom runtime: ${url} -- %O`, props);\n    // TODO: It's unclear why we do application id validation when opening with a URL\n    const applicationId = props.applicationId ?? (await this._getAppIdResolver().getAppIdAsync());\n\n    const deviceManager = await this.props.resolveDeviceAsync(resolveSettings);\n\n    if (!(await deviceManager.isAppInstalledAsync(applicationId))) {\n      throw new CommandError(\n        `No development build (${applicationId}) for this project is installed. ` +\n          `Please make and install a development build on the device first.\\n${learnMore(\n            'https://docs.expo.dev/development/build/'\n          )}`\n      );\n    }\n\n    // TODO: Rethink analytics\n    await logEventAsync('Open Url on Device', {\n      platform: this.props.platform,\n      installedExpo: false,\n    });\n\n    if (!url) {\n      url = this._resolveAlternativeLaunchUrl(applicationId, props);\n    }\n\n    deviceManager.logOpeningUrl(url);\n    await deviceManager.activateWindowAsync();\n    await deviceManager.openUrlAsync(url);\n\n    return {\n      url,\n    };\n  }\n\n  /** Launch the project on a device given the input runtime. */\n  async openAsync(\n    options:\n      | {\n          runtime: 'expo' | 'web';\n        }\n      | {\n          runtime: 'custom';\n          props?: Partial<IOpenInCustomProps>;\n        },\n    resolveSettings: Partial<IResolveDeviceProps> = {}\n  ): Promise<{ url: string }> {\n    debug(\n      `open (runtime: ${options.runtime}, platform: ${this.props.platform}, device: %O, shouldPrompt: ${resolveSettings.shouldPrompt})`,\n      resolveSettings.device\n    );\n    if (options.runtime === 'expo') {\n      return this.openProjectInExpoGoAsync(resolveSettings);\n    } else if (options.runtime === 'web') {\n      return this.openWebProjectAsync(resolveSettings);\n    } else if (options.runtime === 'custom') {\n      return this.openProjectInCustomRuntimeAsync(resolveSettings, options.props);\n    } else {\n      throw new CommandError(`Invalid runtime target: ${options.runtime}`);\n    }\n  }\n\n  /** Open the current web project (Webpack) in a device . */\n  private async openWebProjectAsync(resolveSettings: Partial<IResolveDeviceProps> = {}): Promise<{\n    url: string;\n  }> {\n    const url = this.props.getDevServerUrl();\n    assert(url, 'Dev server is not running.');\n\n    const deviceManager = await this.props.resolveDeviceAsync(resolveSettings);\n    deviceManager.logOpeningUrl(url);\n    await deviceManager.activateWindowAsync();\n    await deviceManager.openUrlAsync(url);\n\n    return { url };\n  }\n\n  /** If the launch URL cannot be determined (`custom` runtimes) then an alternative string can be provided to open the device. Often a device ID or activity to launch. Exposed for testing. */\n  _resolveAlternativeLaunchUrl(\n    applicationId: string,\n    props: Partial<IOpenInCustomProps> = {}\n  ): string {\n    throw new UnimplementedError();\n  }\n}\n"],"names":["debug","require","PlatformManager","constructor","projectRoot","props","_getAppIdResolver","UnimplementedError","getExpoGoOrCustomRuntimeUrlAsync","deviceManager","redirectUrl","getRedirectUrl","applicationId","getAppIdAsync","Log","warn","chalk","learnMore","isAppInstalledAsync","name","getExpoGoUrl","openProjectInExpoGoAsync","resolveSettings","resolveDeviceAsync","url","logOpeningUrl","exp","getConfig","installedExpo","ensureExpoGoAsync","sdkVersion","activateWindowAsync","openUrlAsync","logEventAsync","platform","openProjectInCustomRuntimeAsync","Object","entries","map","k","v","join","getCustomRuntimeUrl","scheme","CommandError","_resolveAlternativeLaunchUrl","openAsync","options","runtime","shouldPrompt","device","openWebProjectAsync","getDevServerUrl","assert"],"mappings":"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"}