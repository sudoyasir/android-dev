{"version":3,"sources":["../../../../src/start/platforms/ExpoGoInstaller.ts"],"sourcesContent":["import semver from 'semver';\n\nimport { getVersionsAsync } from '../../api/getVersions';\nimport * as Log from '../../log';\nimport { downloadExpoGoAsync } from '../../utils/downloadExpoGoAsync';\nimport { env } from '../../utils/env';\nimport { CommandError } from '../../utils/errors';\nimport { logNewSection } from '../../utils/ora';\nimport { confirmAsync } from '../../utils/prompts';\nimport type { DeviceManager } from './DeviceManager';\n\nconst debug = require('debug')('expo:utils:ExpoGoInstaller') as typeof console.log;\n\n/** Given a platform, appId, and sdkVersion, this module will ensure that Expo Go is up-to-date on the provided device. */\nexport class ExpoGoInstaller<IDevice> {\n  // Keep a list of [platform-deviceId] so we can prevent asking multiple times if a user wants to upgrade.\n  // This can prevent annoying interactions when they don't want to upgrade for whatever reason.\n  static cache: Record<string, boolean> = {};\n\n  constructor(\n    private platform: 'ios' | 'android',\n    // Ultimately this should be inlined since we know the platform.\n    private appId: string,\n    private sdkVersion?: string\n  ) {}\n\n  /** Returns true if the installed app matching the previously provided `appId` is outdated. */\n  async isClientOutdatedAsync(device: DeviceManager<IDevice>): Promise<boolean> {\n    const installedVersion = await device.getAppVersionAsync(this.appId);\n    if (!installedVersion) {\n      return true;\n    }\n    const version = await this._getExpectedClientVersionAsync();\n    debug(`Expected Expo Go version: ${version}, installed version: ${installedVersion}`);\n    return version ? !semver.eq(installedVersion, version) : true;\n  }\n\n  /** Returns the expected version of Expo Go given the project SDK Version. Exposed for testing. */\n  async _getExpectedClientVersionAsync(): Promise<string | null> {\n    const versions = await getVersionsAsync();\n    // Like `sdkVersions['44.0.0']['androidClientVersion'] = '1.0.0'`\n    const specificVersion =\n      versions?.sdkVersions?.[this.sdkVersion!]?.[`${this.platform}ClientVersion`];\n    const latestVersion = versions[`${this.platform}Version`];\n    return specificVersion ?? latestVersion ?? null;\n  }\n\n  /** Returns a boolean indicating if Expo Go should be installed. Returns `true` if the app was uninstalled. */\n  async uninstallExpoGoIfOutdatedAsync(deviceManager: DeviceManager<IDevice>): Promise<boolean> {\n    const cacheId = `${this.platform}-${deviceManager.identifier}`;\n\n    if (ExpoGoInstaller.cache[cacheId]) {\n      debug('skipping subsequent upgrade check');\n      return false;\n    }\n    ExpoGoInstaller.cache[cacheId] = true;\n\n    if (await this.isClientOutdatedAsync(deviceManager)) {\n      if (this.sdkVersion === 'UNVERSIONED') {\n        // This should only happen in the expo/expo repo, e.g. `apps/test-suite`\n        Log.log(\n          `Skipping Expo Go upgrade check for UNVERSIONED project. Manually ensure the Expo Go app is built from source.`\n        );\n        return false;\n      }\n\n      // Only prompt once per device, per run.\n      const confirm = await confirmAsync({\n        initial: true,\n        message: `Expo Go on ${deviceManager.name} is outdated, would you like to upgrade?`,\n      });\n      if (confirm) {\n        // Don't need to uninstall to update on iOS.\n        if (this.platform !== 'ios') {\n          Log.log(`Uninstalling Expo Go from ${this.platform} device ${deviceManager.name}.`);\n          await deviceManager.uninstallAppAsync(this.appId);\n        }\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /** Check if a given device has Expo Go installed, if not then download and install it. */\n  async ensureAsync(deviceManager: DeviceManager<IDevice>): Promise<boolean> {\n    let shouldInstall = !(await deviceManager.isAppInstalledAsync(this.appId));\n\n    if (env.EXPO_OFFLINE) {\n      if (!shouldInstall) {\n        Log.warn(`Skipping Expo Go version validation in offline mode`);\n        return false;\n      }\n      throw new CommandError(\n        'NO_EXPO_GO',\n        `Expo Go is not installed on device \"${deviceManager.name}\", while running in offline mode. Manually install Expo Go or run without --offline flag (or EXPO_OFFLINE environment variable).`\n      );\n    }\n\n    if (!shouldInstall) {\n      shouldInstall = await this.uninstallExpoGoIfOutdatedAsync(deviceManager);\n    }\n\n    if (shouldInstall) {\n      // Download the Expo Go app from the Expo servers.\n      const binaryPath = await downloadExpoGoAsync(this.platform, { sdkVersion: this.sdkVersion });\n      // Install the app on the device.\n      const ora = logNewSection(`Installing Expo Go on ${deviceManager.name}`);\n      try {\n        await deviceManager.installAppAsync(binaryPath);\n      } finally {\n        ora.stop();\n      }\n      return true;\n    }\n    return false;\n  }\n}\n"],"names":["Log","debug","require","ExpoGoInstaller","cache","constructor","platform","appId","sdkVersion","isClientOutdatedAsync","device","installedVersion","getAppVersionAsync","version","_getExpectedClientVersionAsync","semver","eq","versions","getVersionsAsync","specificVersion","sdkVersions","latestVersion","uninstallExpoGoIfOutdatedAsync","deviceManager","cacheId","identifier","log","confirm","confirmAsync","initial","message","name","uninstallAppAsync","ensureAsync","shouldInstall","isAppInstalledAsync","env","EXPO_OFFLINE","warn","CommandError","binaryPath","downloadExpoGoAsync","ora","logNewSection","installAppAsync","stop"],"mappings":"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"}