{"version":3,"sources":["../../../../../src/start/platforms/android/AndroidAppIdResolver.ts"],"sourcesContent":["import { AndroidConfig } from '@expo/config-plugins';\n\nimport { AppIdResolver } from '../AppIdResolver';\n\nconst debug = require('debug')(\n  'expo:start:platforms:android:AndroidAppIdResolver'\n) as typeof console.log;\n\n/** Resolves the Android package name from the Expo config or native files. */\nexport class AndroidAppIdResolver extends AppIdResolver {\n  constructor(projectRoot: string) {\n    super(projectRoot, 'android', 'android.package');\n  }\n\n  async hasNativeProjectAsync(): Promise<boolean> {\n    try {\n      await AndroidConfig.Paths.getProjectPathOrThrowAsync(this.projectRoot);\n      return true;\n    } catch (error: any) {\n      debug('Expected error checking for native project:', error);\n      return false;\n    }\n  }\n\n  async resolveAppIdFromNativeAsync(): Promise<string | null> {\n    const applicationIdFromGradle = await AndroidConfig.Package.getApplicationIdAsync(\n      this.projectRoot\n    ).catch(() => null);\n    if (applicationIdFromGradle) {\n      return applicationIdFromGradle;\n    }\n\n    try {\n      const filePath = await AndroidConfig.Paths.getAndroidManifestAsync(this.projectRoot);\n      const androidManifest = await AndroidConfig.Manifest.readAndroidManifestAsync(filePath);\n      // Assert MainActivity defined.\n      await AndroidConfig.Manifest.getMainActivityOrThrow(androidManifest);\n      if (androidManifest.manifest?.$?.package) {\n        return androidManifest.manifest.$.package;\n      }\n    } catch (error: any) {\n      debug('Expected error resolving the package name from the AndroidManifest.xml:', error);\n    }\n\n    return null;\n  }\n}\n"],"names":["debug","require","AndroidAppIdResolver","AppIdResolver","constructor","projectRoot","hasNativeProjectAsync","AndroidConfig","Paths","getProjectPathOrThrowAsync","error","resolveAppIdFromNativeAsync","applicationIdFromGradle","Package","getApplicationIdAsync","catch","androidManifest","filePath","getAndroidManifestAsync","Manifest","readAndroidManifestAsync","getMainActivityOrThrow","manifest","$","package"],"mappings":"AAAA;;;;AAA8B,IAAA,cAAsB,WAAtB,sBAAsB,CAAA;AAEtB,IAAA,cAAkB,WAAlB,kBAAkB,CAAA;AAEhD,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC,CAC5B,mDAAmD,CACpD,AAAsB,AAAC;AAGjB,MAAMC,oBAAoB,SAASC,cAAa,cAAA;IACrDC,YAAYC,WAAmB,CAAE;QAC/B,KAAK,CAACA,WAAW,EAAE,SAAS,EAAE,iBAAiB,CAAC,CAAC;KAClD;IAED,MAAMC,qBAAqB,GAAqB;QAC9C,IAAI;YACF,MAAMC,cAAa,cAAA,CAACC,KAAK,CAACC,0BAA0B,CAAC,IAAI,CAACJ,WAAW,CAAC,CAAC;YACvE,OAAO,IAAI,CAAC;SACb,CAAC,OAAOK,KAAK,EAAO;YACnBV,KAAK,CAAC,6CAA6C,EAAEU,KAAK,CAAC,CAAC;YAC5D,OAAO,KAAK,CAAC;SACd;KACF;IAED,MAAMC,2BAA2B,GAA2B;QAC1D,MAAMC,uBAAuB,GAAG,MAAML,cAAa,cAAA,CAACM,OAAO,CAACC,qBAAqB,CAC/E,IAAI,CAACT,WAAW,CACjB,CAACU,KAAK,CAAC,IAAM,IAAI;QAAA,CAAC,AAAC;QACpB,IAAIH,uBAAuB,EAAE;YAC3B,OAAOA,uBAAuB,CAAC;SAChC;QAED,IAAI;gBAKEI,GAAwB;YAJ5B,MAAMC,QAAQ,GAAG,MAAMV,cAAa,cAAA,CAACC,KAAK,CAACU,uBAAuB,CAAC,IAAI,CAACb,WAAW,CAAC,AAAC;YACrF,MAAMW,eAAe,GAAG,MAAMT,cAAa,cAAA,CAACY,QAAQ,CAACC,wBAAwB,CAACH,QAAQ,CAAC,AAAC;YACxF,+BAA+B;YAC/B,MAAMV,cAAa,cAAA,CAACY,QAAQ,CAACE,sBAAsB,CAACL,eAAe,CAAC,CAAC;YACrE,IAAIA,CAAAA,GAAwB,GAAxBA,eAAe,CAACM,QAAQ,SAAG,GAA3BN,KAAAA,CAA2B,GAA3BA,QAAAA,GAAwB,CAAEO,CAAC,SAAA,GAA3BP,KAAAA,CAA2B,QAAEQ,OAAO,AAAT,EAAW;gBACxC,OAAOR,eAAe,CAACM,QAAQ,CAACC,CAAC,CAACC,OAAO,CAAC;aAC3C;SACF,CAAC,OAAOd,KAAK,EAAO;YACnBV,KAAK,CAAC,yEAAyE,EAAEU,KAAK,CAAC,CAAC;SACzF;QAED,OAAO,IAAI,CAAC;KACb;CACF;QArCYR,oBAAoB,GAApBA,oBAAoB"}