{"version":3,"sources":["../../../../../src/start/platforms/ios/AppleAppIdResolver.ts"],"sourcesContent":["import { IOSConfig } from '@expo/config-plugins';\nimport plist from '@expo/plist';\nimport fs from 'fs';\n\nimport { AppIdResolver } from '../AppIdResolver';\n\nconst debug = require('debug')('expo:start:platforms:ios:AppleAppIdResolver') as typeof console.log;\n\n/** Resolves the iOS bundle identifier from the Expo config or native files. */\nexport class AppleAppIdResolver extends AppIdResolver {\n  constructor(projectRoot: string) {\n    super(projectRoot, 'ios', 'ios.bundleIdentifier');\n  }\n\n  /** @return `true` if the app has valid `*.pbxproj` file */\n  async hasNativeProjectAsync(): Promise<boolean> {\n    try {\n      // Never returns nullish values.\n      return !!IOSConfig.Paths.getAllPBXProjectPaths(this.projectRoot).length;\n    } catch (error: any) {\n      debug('Expected error checking for native project:', error);\n      return false;\n    }\n  }\n\n  async resolveAppIdFromNativeAsync(): Promise<string | null> {\n    // Check xcode project\n    try {\n      const bundleId = IOSConfig.BundleIdentifier.getBundleIdentifierFromPbxproj(this.projectRoot);\n      if (bundleId) {\n        return bundleId;\n      }\n    } catch (error: any) {\n      debug('Expected error resolving the bundle identifier from the pbxproj:', error);\n    }\n\n    // Check Info.plist\n    try {\n      const infoPlistPath = IOSConfig.Paths.getInfoPlistPath(this.projectRoot);\n      const data = await plist.parse(fs.readFileSync(infoPlistPath, 'utf8'));\n      if (data.CFBundleIdentifier && !data.CFBundleIdentifier.startsWith('$(')) {\n        return data.CFBundleIdentifier;\n      }\n    } catch (error) {\n      debug('Expected error resolving the bundle identifier from the project Info.plist:', error);\n    }\n\n    return null;\n  }\n}\n"],"names":["debug","require","AppleAppIdResolver","AppIdResolver","constructor","projectRoot","hasNativeProjectAsync","IOSConfig","Paths","getAllPBXProjectPaths","length","error","resolveAppIdFromNativeAsync","bundleId","BundleIdentifier","getBundleIdentifierFromPbxproj","infoPlistPath","getInfoPlistPath","data","plist","parse","fs","readFileSync","CFBundleIdentifier","startsWith"],"mappings":"AAAA;;;;AAA0B,IAAA,cAAsB,WAAtB,sBAAsB,CAAA;AAC9B,IAAA,MAAa,kCAAb,aAAa,EAAA;AAChB,IAAA,GAAI,kCAAJ,IAAI,EAAA;AAEW,IAAA,cAAkB,WAAlB,kBAAkB,CAAA;;;;;;AAEhD,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC,CAAC,6CAA6C,CAAC,AAAsB,AAAC;AAG7F,MAAMC,kBAAkB,SAASC,cAAa,cAAA;IACnDC,YAAYC,WAAmB,CAAE;QAC/B,KAAK,CAACA,WAAW,EAAE,KAAK,EAAE,sBAAsB,CAAC,CAAC;KACnD;IAED,2DAA2D,CAC3D,MAAMC,qBAAqB,GAAqB;QAC9C,IAAI;YACF,gCAAgC;YAChC,OAAO,CAAC,CAACC,cAAS,UAAA,CAACC,KAAK,CAACC,qBAAqB,CAAC,IAAI,CAACJ,WAAW,CAAC,CAACK,MAAM,CAAC;SACzE,CAAC,OAAOC,KAAK,EAAO;YACnBX,KAAK,CAAC,6CAA6C,EAAEW,KAAK,CAAC,CAAC;YAC5D,OAAO,KAAK,CAAC;SACd;KACF;IAED,MAAMC,2BAA2B,GAA2B;QAC1D,sBAAsB;QACtB,IAAI;YACF,MAAMC,QAAQ,GAAGN,cAAS,UAAA,CAACO,gBAAgB,CAACC,8BAA8B,CAAC,IAAI,CAACV,WAAW,CAAC,AAAC;YAC7F,IAAIQ,QAAQ,EAAE;gBACZ,OAAOA,QAAQ,CAAC;aACjB;SACF,CAAC,OAAOF,KAAK,EAAO;YACnBX,KAAK,CAAC,kEAAkE,EAAEW,KAAK,CAAC,CAAC;SAClF;QAED,mBAAmB;QACnB,IAAI;YACF,MAAMK,aAAa,GAAGT,cAAS,UAAA,CAACC,KAAK,CAACS,gBAAgB,CAAC,IAAI,CAACZ,WAAW,CAAC,AAAC;YACzE,MAAMa,IAAI,GAAG,MAAMC,MAAK,QAAA,CAACC,KAAK,CAACC,GAAE,QAAA,CAACC,YAAY,CAACN,aAAa,EAAE,MAAM,CAAC,CAAC,AAAC;YACvE,IAAIE,IAAI,CAACK,kBAAkB,IAAI,CAACL,IAAI,CAACK,kBAAkB,CAACC,UAAU,CAAC,IAAI,CAAC,EAAE;gBACxE,OAAON,IAAI,CAACK,kBAAkB,CAAC;aAChC;SACF,CAAC,OAAOZ,MAAK,EAAE;YACdX,KAAK,CAAC,6EAA6E,EAAEW,MAAK,CAAC,CAAC;SAC7F;QAED,OAAO,IAAI,CAAC;KACb;CACF;QAxCYT,kBAAkB,GAAlBA,kBAAkB"}