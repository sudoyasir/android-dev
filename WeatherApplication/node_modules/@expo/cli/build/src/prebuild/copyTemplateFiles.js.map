{"version":3,"sources":["../../../src/prebuild/copyTemplateFiles.ts"],"sourcesContent":["import { ModPlatform } from '@expo/config-plugins';\nimport { MergeResults } from '@expo/config-plugins/build/utils/generateCode';\nimport chalk from 'chalk';\nimport fs from 'fs';\nimport path from 'path';\n\nimport { copySync, directoryExistsAsync } from '../utils/dir';\nimport { mergeGitIgnorePaths } from '../utils/mergeGitIgnorePaths';\n\nconst debug = require('debug')('expo:prebuild:copyTemplateFiles') as typeof console.log;\n\ntype CopyFilesResults = {\n  /** Merge results for the root `.gitignore` file */\n  gitignore: MergeResults | null;\n  /** List of file paths that were copied from the template into the project. */\n  copiedPaths: string[];\n  /** List of file paths that were skipped due to a number of factors. */\n  skippedPaths: string[];\n};\n\n/**\n * Return true if the given platforms all have an internal `.gitignore` file.\n *\n * @param projectRoot\n * @param platforms\n */\nfunction hasAllPlatformSpecificGitIgnores(projectRoot: string, platforms: ModPlatform[]): boolean {\n  return platforms.reduce<boolean>(\n    (p, platform) => p && fs.existsSync(path.join(projectRoot, platform, '.gitignore')),\n    true\n  );\n}\n\n/** Create a custom log message based on the copy file results. */\nexport function createCopyFilesSuccessMessage(\n  platforms: ModPlatform[],\n  { skippedPaths, gitignore }: CopyFilesResults\n): string {\n  let message = `Created native project${platforms.length > 1 ? 's' : ''}`;\n\n  if (skippedPaths.length) {\n    message += chalk.dim(\n      ` | ${skippedPaths.map((path) => chalk.bold(`/${path}`)).join(', ')} already created`\n    );\n  }\n  if (!gitignore) {\n    message += chalk.dim(` | gitignore skipped`);\n  } else if (!gitignore.didMerge) {\n    message += chalk.dim(` | gitignore already synced`);\n  } else if (gitignore.didMerge && gitignore.didClear) {\n    message += chalk.dim(` | synced gitignore`);\n  }\n  return message;\n}\n\n/** Copy template files into the project and possibly merge the `.gitignore` files.  */\nexport async function copyTemplateFilesAsync(\n  projectRoot: string,\n  {\n    templateDirectory,\n    platforms,\n  }: {\n    /** File path to the template directory. */\n    templateDirectory: string;\n    /** List of platforms to copy against. */\n    platforms: ModPlatform[];\n  }\n): Promise<CopyFilesResults> {\n  const copyResults = await copyPathsFromTemplateAsync(projectRoot, {\n    templateDirectory,\n    copyFilePaths: platforms,\n  });\n\n  const hasPlatformSpecificGitIgnores = hasAllPlatformSpecificGitIgnores(\n    templateDirectory,\n    platforms\n  );\n  debug(`All platforms have an internal gitignore: ${hasPlatformSpecificGitIgnores}`);\n\n  // TODO: Remove gitignore modifications -- maybe move to `npx expo-doctor`\n  const gitignore = hasPlatformSpecificGitIgnores\n    ? null\n    : mergeGitIgnorePaths(\n        path.join(projectRoot, '.gitignore'),\n        path.join(templateDirectory, '.gitignore')\n      );\n\n  return { ...copyResults, gitignore };\n}\n\nasync function copyPathsFromTemplateAsync(\n  /** File path to the project. */\n  projectRoot: string,\n  {\n    templateDirectory,\n    copyFilePaths,\n  }: {\n    /** File path to the template project. */\n    templateDirectory: string;\n    /** List of relative paths to copy from the template to the project. */\n    copyFilePaths: string[];\n  }\n): Promise<Pick<CopyFilesResults, 'copiedPaths' | 'skippedPaths'>> {\n  const copiedPaths = [];\n  const skippedPaths = [];\n  for (const copyFilePath of copyFilePaths) {\n    const projectPath = path.join(projectRoot, copyFilePath);\n    if (!(await directoryExistsAsync(projectPath))) {\n      copiedPaths.push(copyFilePath);\n      copySync(path.join(templateDirectory, copyFilePath), projectPath);\n    } else {\n      skippedPaths.push(copyFilePath);\n    }\n  }\n  debug(`Copied files:`, copiedPaths);\n  debug(`Skipped files:`, copiedPaths);\n  return { copiedPaths, skippedPaths };\n}\n"],"names":["createCopyFilesSuccessMessage","copyTemplateFilesAsync","debug","require","hasAllPlatformSpecificGitIgnores","projectRoot","platforms","reduce","p","platform","fs","existsSync","path","join","skippedPaths","gitignore","message","length","chalk","dim","map","bold","didMerge","didClear","templateDirectory","copyResults","copyPathsFromTemplateAsync","copyFilePaths","hasPlatformSpecificGitIgnores","mergeGitIgnorePaths","copiedPaths","copyFilePath","projectPath","directoryExistsAsync","push","copySync"],"mappings":"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"}